input_channels|4|#number of input channels; 4 in case of DNA input
use_embeddings|False|#Use word2vec based embeddings if True otherwise use the one-hot encoded input
embd_size|50|#size of the word2vec embedding
embd_window|5|#size of the word2vec embedding window
embd_kmersize|3|#size of the word2vec kmer
CNN1_filters|200|#number of 1st CNN layer filters
CNN1_filtersize|13|#size of the 1st CNN layer filters
CNN1_padding|6|#number of padded 0's to each end (future: auto-infer, see utils for a function)
CNN1_usesoftplus|True|#use Softplus() as activation in the first CNN layer (ReLU is used if False)
CNN1_poolsize|6|#maxpooling size for the 1st CNN layer
CNN2_filters|100|#number of 2nd CNN layer filters
CNN2_filtersize|5|#size of the 2nd CNN layer filters
CNN2_padding|2|#number of padded 0's to each end (future: auto-infer, a little tricky: 100 was layer 1 output size so (100-(100-5+1))/2=2
CNN2_poolsize|1|#maxpooling size for the 2nd CNN layer. 1 means no maxpooling (future: don't maxpool if its 1, add to code)
CNN3_filters|50|#number of 3rd CNN layer filters
CNN3_filtersize|9|#size of the 3rd CNN layer filters
CNN3_padding|4|#number of padded 0's to each end (future: auto-infer, a little tricky: 100 was layer 2 output size so (100-(100-9+1))/2=4
CNN3_poolsize|2|#maxpooling size for the 2st CNN layer. 1 means no maxpooling (future: don't maxpool if its 1, add to code)
FC1_inputsize|2500|#size of the 1st FC layer (future: auto-infer, flattening conv 3 output: size=50 and 50 filters in layer 3 so 50x50 = 2500)
FC1_outputsize|800|#output size of the 1st FC layer
FC2_outputsize|300|#output size of the 2nd FC layer
num_classes|2|#number of targets (binary classification in this case)
get_CNNout|True|#get first CNN layer output (useful for motif analysis)
get_seqs|True|#get sequences for the test set examples (useful for motif analysis)
batch_size|256|#batch size
num_epochs|30|#number of epochs
